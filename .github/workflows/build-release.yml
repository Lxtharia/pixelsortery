name: Build Release

on:
  release:
    types: [published]
    branches: [main]
  workflow_dispatch:  
    inputs:
      tag_name:
        description: "Tag name of the release"
        required: true
# push:
#   branches:
#     - main
      

env:
  CARGO_TERM_COLOR: always
  TAG_NAME: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}

jobs:
  build:

    permissions:
      contents: write  
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: pixelsortery-linux
            cargo_target: release
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: pixelsortery-darwin-x86
            cargo_target: release
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_name: pixelsortery-darwin-aarch
            cargo_target: release
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: pixelsortery-windows
            cargo_target: release
    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    
    steps:
    # Checkout either the tag or main (on nightly build)
    - uses: actions/checkout@v4
      if: env.TAG_NAME != 'nightly'
      with: 
        ref: ${{ env.TAG_NAME }}
    - uses: actions/checkout@v4
      if: env.TAG_NAME == 'nightly'
      with: 
        ref: main
    
    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # This is mainly for the two different targets on darwin/macos
    - name: Set default toolchain to target
      run: |
          rustup update stable
          rustup default --force-non-host stable-${{ matrix.target }}

    - name: Build binaries in mode "${{ matrix.cargo_target }}" for os "${{ matrix.os }}"
      run: cargo build --profile ${{ matrix.cargo_target }} --target ${{ matrix.target }}
      
    # - name: Run tests
    #   run: cargo test --profile ${{ matrix.BUILD_TARGET }}
    
    - name: Add version to binary name
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]] ; then EXT=".exe"; fi
        src=target/${{ matrix.target }}/${{ matrix.cargo_target }}/pixelsortery$EXT
        dst=${{ matrix.bin_name }}-${{ env.TAG_NAME }}$EXT
        ls -lah target/*
        mv  "$src" "$dst"
        echo "BIN_NAME=$dst" >> $GITHUB_ENV

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BIN_NAME }}
        path: ${{ matrix.binname }}
        retention-days: 1


  publish:
    needs: build
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ARTIFACTS: pixelsortery-linux  pixelsortery-darwin-x86 pixelsortery-darwin-aarch pixelsortery-windows
    permissions:
      contents: write
    steps:
    # Update normal release artifacts
    - name: Upload artifact to release
      uses: softprops/action-gh-release@v2
      if: env.TAG_NAME != 'nightly'
      with:
        tag_name: ${{ env.TAG_NAME }}
        files: ${{ env.ARTIFACTS }}

    # Nightly Ged√∂ns
    # Must perform checkout first, since it deletes the target directory
    # before running, and would therefore delete the downloaded artifacts
    - uses: actions/checkout@v4
      if: env.TAG_NAME == 'nightly'
      with: 
        ref: main

    - uses: actions/download-artifact@v4
      if: env.TAG_NAME == 'nightly'
      with:
        path: artifacts
        merge-multiple: true

    # Update nightly tag
    - name: Update the nightly tag
      if: env.TAG_NAME == 'nightly'
      run: |
         git config user.name "github-actions[bot]"
         git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
         git tag --force "$TAG"
         git push --force origin "$TAG"
      env:
         TAG: nightly
         GH_TOKEN: ${{ github.token }}
    # Delete previous nightly release
    - name: Delete previous nightly release
      if: env.TAG_NAME == 'nightly'
      continue-on-error: true
      run: |
        gh release delete --yes "$TAG"
      env:
         TAG: nightly
         GH_TOKEN: ${{ github.token }} 
    # Create new nightly release
    - name: Publish pre-release on GitHub
      if: env.TAG_NAME == 'nightly'
      run: |
         gh release create \
           --title "$TITLE" \
           --notes "$NOTES" \
           --prerelease \
           --draft=false \
           "$TAG"
         ls -l artifacts/
         gh release upload --clobber "$TAG" artifacts/*
      env:
         NOTES: This is a prerelease and may contain faulty or non functional code.
         TITLE: Nightly Release
         TAG: ${{ env.TAG_NAME }}
         GH_TOKEN: ${{ github.token }}

        
        
        
